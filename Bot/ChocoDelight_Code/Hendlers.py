from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import os
from Bot.ChocoDelight_Code.DataBase import db_cursor, db_connect
from Bot.ChocoDelight_Code.StatusGroup import Registration
from Bot.ChocoDelight_Code.KeyBoards import Phone, language, Home

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(CommandStart())
async def starting_bot(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = db_cursor.fetchone()

    if user:
        await start_home(message)
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —è–∑—ã–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n\n"
                             "Keling, avvaliga xizmat ko'rsatish tilini tanlab olaylik.\n\n"
                             "Hello! Let's start by selecting the language for assistance!\n\n",
                             reply_markup=language)


@dp.message(F.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
async def russian_registration(message: types.Message, state: FSMContext):
    await state.set_state(Registration.name)
    await message.answer("–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å,"
                         " —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç!\n\n"
                         "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.phone)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=Phone)


@dp.message(Registration.phone, F.contact)
async def process_phone(message: types.Message, state: FSMContext):
    if message.contact:
        user_data = await state.get_data()
        user_name = user_data['name']
        user_phone = message.contact.phone_number
        user_id = message.from_user.id

        db_cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)",
            (user_id, user_name, user_phone)
        )
        db_connect.commit()

        await state.clear()
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_phone}."
        )
        await start_home(message)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'."
        )


@dp.message()
async def start_home(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üõç –ó–∞–∫–∞–∑–∞—Ç—å.\n\n"
                         "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º —Ñ–∏–ª–∏–∞–ª—ã.",
                         reply_markup=Home)
